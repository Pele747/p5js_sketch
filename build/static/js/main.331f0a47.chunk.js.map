{"version":3,"sources":["components/Todos/Todo/Todo.js","components/Todos/Todos.js","components/TodoAdd/TodoAdd.js","hoc/Aux.js","components/Modal/Modal.js","containers/App.js","serviceWorker.js","index.js"],"names":["Todo","props","liClass","spanClass","checked","push","react_default","a","createElement","onClick","openModal","id","className","join","description","e","toggleCheck","removeTodo","Todos","todos","map","todo","Todos_Todo_Todo","todoInfo","key","TodoAdd","inputRef","React","createRef","ref","type","placeholder","addTodo","aux","children","modal","Aux","closeModal","dateCreated","App","state","showingTodo","showModal","_this","slice","todoIndex","findIndex","setState","input","current","value","identificator","getRandomId","now","Date","date","parseDate","saveToLocalStorage","stopPropagation","splice","Object","objectSpread","JSON","parse","localStorage","getItem","setItem","stringify","uuidv4","day","getDate","month","getMonth","year","getFullYear","concat","this","getTodos","Modal","components_TodoAdd_TodoAdd","addTodoInput","components_Todos_Todos","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.331f0a47.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todo = (props) => {\r\n\r\n    let liClass = ['todo-item'];\r\n    let spanClass = ['check'];\r\n    \r\n    if(props.checked) {\r\n        liClass.push('checked');\r\n        spanClass.push('checked');\r\n    } \r\n\r\n    return (\r\n        <li \r\n            onClick={() => props.openModal(props.id)}\r\n            className={liClass.join(' ')}\r\n        >\r\n            <p>\r\n                {props.description}\r\n            </p> \r\n            <div className='controls'>\r\n                <span \r\n                    onClick={(e) => props.toggleCheck(props.id, e)} \r\n                    className={spanClass.join(' ')}\r\n                >\r\n                    &nbsp;\r\n                </span>\r\n                <span\r\n                    onClick={(e) => props.removeTodo(props.id, e)} \r\n                    className='remove'\r\n                >\r\n                    X\r\n                </span>\r\n            </div>\r\n            \r\n        </li>\r\n    );\r\n} \r\n\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo/Todo';\r\n\r\nconst Todos = (props) => {\r\n    \r\n    const todos = props.todos.map((todo) => {\r\n        return (\r\n            <Todo openModal = {props.openModal} todoInfo={props.todoInfo} removeTodo={props.removeTodo} checked = {todo.checked} id={todo.id} toggleCheck={props.toggleCheck} description={todo.description} key={todo.id}/>\r\n        );\r\n    });\r\n    \r\n    return (\r\n        <ul className='todo-list'>{todos}</ul>    \r\n    );\r\n} \r\n\r\nexport default Todos;","import React from 'react';\r\n\r\nconst TodoAdd = (props) => {\r\n    const inputRef = React.createRef();\r\n\r\n    return (    \r\n        <div className='form-group'>\r\n            <input ref={inputRef} type='text' className='form-control' placeholder='Enter Todo'/>\r\n            <button className='button' onClick={() => {props.addTodo(inputRef)}}>+</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoAdd;","const aux = (props) => {\r\n    return props.children;\r\n};\r\n\r\nexport default aux;","import React from 'react';\r\n\r\nimport Aux from '../../hoc/Aux';\r\n\r\nconst modal = (props) => {\r\n    return (\r\n        <Aux>\r\n            <div className='backdrop' onClick={props.closeModal}/>\r\n            <div className='modal'>\r\n               <h1>Your TODO</h1>\r\n               <p>Description: {props.todo.description}</p>\r\n               <p>Status: {props.todo.checked ? 'Finished' : 'Not Finished'}</p>\r\n               <p>Date Created: {props.todo.dateCreated}</p>\r\n               <button onClick={props.closeModal} className='button-modal'>Close</button>\r\n            </div>\r\n        </Aux>\r\n    );\r\n}\r\n\r\nexport default modal;","import React, { Component } from 'react';\nimport './App.css';\n\nimport uuidv4 from 'uuid/v4';\n\nimport Todos from '../components/Todos/Todos';\nimport TodoAdd from '../components/TodoAdd/TodoAdd';\nimport Modal from '../components/Modal/Modal';\n\nclass App extends Component {\n\n  state = {\n    todos: [],\n    showingTodo: null,\n    showModal: false\n  }\n\n  getTodos() {\n    const todos = JSON.parse(localStorage.getItem('todos'));\n    return todos ? todos : [];\n  }\n\n  saveToLocalStorage(todos) {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }\n\n  getRandomId() {\n    return uuidv4();\n  }\n\n  openModal = (id) => {\n    const todos = this.state.todos.slice();\n    const todoIndex = todos.findIndex(todo => {\n      return todo.id === id;\n    });\n\n    const todo = todos[todoIndex];\n    const show = true;\n\n    this.setState({\n      showingTodo: todo,\n      showModal: show\n    });\n  }\n\n  closeModal = () => {\n    this.setState({\n      showModal: false,\n      showingTodo: null\n    });\n  }\n\n  parseDate(now) {\n    const day = now.getDate();\n    const month = now.getMonth() + 1;\n    const year = now.getFullYear();\n\n    const formatedDate = `${day}.${month}.${year}`;\n\n    return formatedDate;\n  }\n\n  addTodo = (input) => {  \n    if(!input.current.value) {\n      return;\n    }\n\n    let todos = this.state.todos.slice();\n\n    const identificator = this.getRandomId();\n\n    let now = new Date();\n    let date = this.parseDate(now);\n    \n\n    todos.push({\n      id: identificator,\n      description: input.current.value,\n      dateCreated: date,\n      checked: false\n    });\n\n    this.saveToLocalStorage(todos);\n\n    input.current.value = '';\n\n    this.id++;\n\n    this.setState({\n      todos: todos\n    });\n  \n  }\n\n  removeTodo = (id, e) => {\n    e.stopPropagation();\n    const todos = this.state.todos.slice();\n\n    const todoIndex = todos.findIndex(todo => {\n      return todo.id === id;\n    })\n\n    todos.splice(todoIndex, 1);\n\n\n    this.saveToLocalStorage(todos);\n\n    this.setState({\n      todos: todos\n    });\n    \n  }\n\n  toggleCheck = (id, e) => {\n    e.stopPropagation();\n    let todos = this.state.todos.slice();\n\n    const todoIndex = todos.findIndex(todo => {\n      return todo.id === id;\n    })\n\n \n    const todo = todos[todoIndex] = {...todos[todoIndex]};\n    todo.checked = !todos[todoIndex].checked;\n    // todo.checked = !todo.checked;\n\n    this.saveToLocalStorage(todos);\n\n    this.setState({\n      todos: todos\n    });\n  }\n\n  componentDidMount() {\n   const todos = this.getTodos();\n   this.setState({\n     todos: todos\n   });\n  }\n\n  render() {\n    let modal = null;\n\n    if(this.state.showModal) {\n      modal = <Modal todo={this.state.showingTodo} closeModal={this.closeModal}/>\n    } else {\n      modal = null;\n    }\n\n    return (\n     <div>\n      {modal}\n      <div className='todo-container'>\n        <TodoAdd addTodo={this.addTodo} addTodoInput = {this.addTodoInput}/>\n        <Todos openModal={this.openModal} removeTodo={this.removeTodo} toggleCheck = {this.toggleCheck} todos = {this.state.todos}/>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}